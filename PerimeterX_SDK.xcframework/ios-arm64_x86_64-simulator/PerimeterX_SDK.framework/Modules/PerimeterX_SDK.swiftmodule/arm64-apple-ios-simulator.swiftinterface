// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PerimeterX_SDK
import CommonCrypto
import CoreGraphics
import CoreTelephony
import CryptoKit
import Foundation
import JavaScriptCore
import Network
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
public let PerimeterXErrorDomain: Swift.String
public enum PerimeterXErrorCode : Swift.Int {
  case internalError
  case initializationFailed
  case initializationAlreadyRunning
  case requestWasBlocked
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PerimeterXDelegate : ObjectiveC.NSObjectProtocol {
  @objc func perimeterxDidRequestBlocked(forAppId appId: Swift.String)
  @objc func perimeterxDidChallengeSolved(forAppId appId: Swift.String)
}
@_inheritsConvenienceInitializers @objc final public class PerimeterX : ObjectiveC.NSObject {
  @objc public static func start(appId: Swift.String, delegate: PerimeterX_SDK.PerimeterXDelegate?, enableDoctorCheck: Swift.Bool = false, completion: @escaping (Swift.Bool, Swift.Error?) -> ())
  @objc public static func addInitializationFinishedCallback(forAppId appId: Swift.String? = nil, callback: @escaping () -> ())
  @objc public static func setPolicy(policy: PerimeterX_SDK.PXPolicy, forAppId appId: Swift.String? = nil, completion: (() -> ())?)
  @objc public static func setCustomParameters(parameters: [Swift.String : Swift.String], forAppId appId: Swift.String? = nil, completion: (() -> ())?)
  @objc public static func vid(forAppId appId: Swift.String? = nil) -> Swift.String?
  @objc public static func registerCallbackForRequestBlockedEvent(forAppId appId: Swift.String? = nil, callback: @escaping () -> ()) -> Swift.String?
  @objc public static func unregisterCallbackForRequestBlockedEvent(forAppId appId: Swift.String? = nil, registrationId: Swift.String)
  @objc public static func registerCallbackForChallengeSolvedEvent(forAppId appId: Swift.String? = nil, callback: @escaping () -> ()) -> Swift.String?
  @objc public static func unregisterCallbackForChallengeSolvedEvent(forAppId appId: Swift.String? = nil, registrationId: Swift.String)
  @objc public static func headersForURLRequest(forAppId appId: Swift.String? = nil) -> [Swift.String : Swift.String]
  @objc public static func handleResponse(forAppId appId: Swift.String? = nil, data: Foundation.Data, response: Foundation.URLResponse) -> Swift.Bool
  @objc public static func isRequestBlockedError(error: Swift.Error) -> Swift.Bool
  @objc public static func setUserId(userId: Swift.String?, forAppId appId: Swift.String?)
  @objc public static func registerOutgoingUrlRequest(url: Swift.String, forAppId appId: Swift.String?)
  @objc public static func sdkVersion() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PXPolicyChallengeType : Swift.Int, Swift.CaseIterable {
  case webView = 0
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PerimeterX_SDK.PXPolicyChallengeType]
  public typealias RawValue = Swift.Int
  public static var allCases: [PerimeterX_SDK.PXPolicyChallengeType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PXPolicy : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var domains: Swift.Set<Swift.String>
  @objc public var requestsInterceptedAutomaticallyEnabled: Swift.Bool
  @objc public var challengeType: PerimeterX_SDK.PXPolicyChallengeType
  @objc override dynamic public init()
  @objc deinit
}
extension PerimeterX_SDK.PerimeterXErrorCode : Swift.Equatable {}
extension PerimeterX_SDK.PerimeterXErrorCode : Swift.Hashable {}
extension PerimeterX_SDK.PerimeterXErrorCode : Swift.RawRepresentable {}
extension PerimeterX_SDK.PXPolicyChallengeType : Swift.Equatable {}
extension PerimeterX_SDK.PXPolicyChallengeType : Swift.Hashable {}
extension PerimeterX_SDK.PXPolicyChallengeType : Swift.RawRepresentable {}
