// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PerimeterX_SDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppleArchive
import CommonCrypto
import CoreGraphics
import CoreMotion
import CoreTelephony
import CryptoKit
import DeveloperToolsSupport
import Foundation
import Network
@_exported import PerimeterX_SDK
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import _System_Foundation
public let PerimeterXErrorDomain: Swift.String
@objc public enum PerimeterXErrorCode : Swift.Int {
  case missingAppId = 0
  case invalidAppId = 1
  case startNotCalledOnMainThread = 2
  case startCalledMoreThanOnce = 3
  case tokenWasNotGenerated = 4
  case startWasNotCalled = 5
  case internalError = 6
  case requestWasBlocked = 7
  case challengeSolved = 8
  case challengeCancelled = 9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PerimeterXChallengeResult : Swift.Int {
  case solved
  case cancelled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PerimeterXDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func perimeterxDidRequestBlocked(url: Foundation.URL?, appId: Swift.String)
  @objc optional func perimeterxDidChallengeSolved(forAppId appId: Swift.String)
  @objc optional func perimeterxDidChallengeCancelled(forAppId appId: Swift.String)
  @objc optional func perimeterxHeadersWereUpdated(headers: [Swift.String : Swift.String], forAppId appId: Swift.String)
}
@_inheritsConvenienceInitializers @objc final public class PerimeterX : ObjectiveC.NSObject {
  @objc public static func start(appId: Swift.String, delegate: (any PerimeterX_SDK.PerimeterXDelegate)?, policy: PerimeterX_SDK.PXPolicy) throws
  @objc public static func start(appIds: [Swift.String], delegate: (any PerimeterX_SDK.PerimeterXDelegate)?, policy: PerimeterX_SDK.PXPolicy) throws
  @objc public static func vid(forAppId appId: Swift.String? = nil) -> Swift.String?
  @objc public static func headersForURLRequest(forAppId appId: Swift.String? = nil) -> [Swift.String : Swift.String]?
  @objc public static func canHandleResponse(response: Foundation.URLResponse, data: Foundation.Data, forAppId appId: Swift.String? = nil) -> Swift.Bool
  @objc public static func handleResponse(response: Foundation.URLResponse, data: Foundation.Data, forAppId appId: Swift.String? = nil, callback: ((PerimeterX_SDK.PerimeterXChallengeResult) -> ())?) -> Swift.Bool
  @objc public static func setCustomParameters(parameters: [Swift.String : Swift.String], forAppId appId: Swift.String? = nil) throws
  @objc public static func isRequestBlockedError(error: any Swift.Error) -> Swift.Bool
  @objc public static func isChallengeSolvedError(error: any Swift.Error) -> Swift.Bool
  @objc public static func isChallengeCancelledError(error: any Swift.Error) -> Swift.Bool
  @objc public static func setUserId(userId: Swift.String?, forAppId appId: Swift.String? = nil) throws
  @objc public static func registerOutgoingUrlRequest(url: Swift.String, forAppId appId: Swift.String? = nil) throws
  @objc public static func setAdditionalData(parameters: [Swift.String : Swift.String], forAppId appId: Swift.String? = nil) throws
  @objc public static func sdkVersion() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PXPolicyUrlRequestInterceptionType : Swift.Int {
  case none = 0
  case intercept = 1
  case interceptWithDelayedResponse = 2
  case interceptAndRetryRequest = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PXPolicy : ObjectiveC.NSObject, Foundation.NSCopying {
  public var byPassMonitorHeaderValue: Swift.String? {
    get
    set
  }
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc public var urlRequestInterceptionType: PerimeterX_SDK.PXPolicyUrlRequestInterceptionType
  @objc public var hybridAppSupportEnabled: Swift.Bool
  @objc public func set(domains: Swift.Set<Swift.String>, forAppId appId: Swift.String)
  @objc public var allowTouchDetection: Swift.Bool
  @objc public var allowDeviceMotionDetection: Swift.Bool
  @objc public var allowJavaScriptEvaluation: Swift.Bool
  @objc public var doctorCheckEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension PerimeterX_SDK.PerimeterXErrorCode : Swift.Equatable {}
extension PerimeterX_SDK.PerimeterXErrorCode : Swift.Hashable {}
extension PerimeterX_SDK.PerimeterXErrorCode : Swift.RawRepresentable {}
extension PerimeterX_SDK.PerimeterXChallengeResult : Swift.Equatable {}
extension PerimeterX_SDK.PerimeterXChallengeResult : Swift.Hashable {}
extension PerimeterX_SDK.PerimeterXChallengeResult : Swift.RawRepresentable {}
extension PerimeterX_SDK.PXPolicyUrlRequestInterceptionType : Swift.Equatable {}
extension PerimeterX_SDK.PXPolicyUrlRequestInterceptionType : Swift.Hashable {}
extension PerimeterX_SDK.PXPolicyUrlRequestInterceptionType : Swift.RawRepresentable {}
