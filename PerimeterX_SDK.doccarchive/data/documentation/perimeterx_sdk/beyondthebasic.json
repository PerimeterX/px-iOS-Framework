{"sections":[],"metadata":{"roleHeading":"Article","modules":[{"name":"PerimeterX_SDK"}],"role":"article","title":"Beyond the Basic"},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/BeyondTheBasic"},"variants":[{"paths":["\/documentation\/perimeterx_sdk\/beyondthebasic"],"traits":[{"interfaceLanguage":"swift"}]},{"paths":["\/documentation\/perimeterx_sdk\/beyondthebasic"],"traits":[{"interfaceLanguage":"occ"}]}],"abstract":[{"text":"In this article we will explore more advanced topics that will help you to get the most out of the SDK.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"AppID","level":3,"text":"AppID"},{"type":"paragraph","inlineContent":[{"text":"The AppID is the key to start the PerimeterX SDK, by calling the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/start(appId:delegate:enableDoctorCheck:completion:)"},{"text":" function with it. If you are using only one AppID in your app, all other functions in the SDK will work properly without specifying the AppID again (you may pass ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":").","type":"text"}]},{"level":3,"type":"heading","text":"Callbacks","anchor":"Callbacks"},{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXDelegate","isActive":true,"type":"reference"},{"type":"text","text":" provides callbacks, such as request blocked or challenge solved\/cancelled. However, The delegate can be set only once when calling the "},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/start(appId:delegate:enableDoctorCheck:completion:)","isActive":true},{"type":"text","text":" function. You can set that more objects in your project to receive those callbacks too. Use "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForRequestBlockedEvent(forAppId:callback:)","type":"reference","isActive":true},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForChallengeSolvedEvent(forAppId:callback:)"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForChallengeCancelledEvent(forAppId:callback:)","isActive":true},{"text":" functions. Here is an example:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift:","type":"text"}]},{"code":["let requestBlockedEventRegistrationId = PerimeterX.registerCallbackForRequestBlockedEvent {","    print(\"PerimeterX Request Blocked\")","}","","let challengeSolvedEventRegistrationId = PerimeterX.registerCallbackForChallengeSolvedEvent(callback: {","    print(\"PerimeterX Challenge Solved\")","})","","let challengeCancelledEventRegistrationId = PerimeterX.registerCallbackForChallengeCancelledEvent(callback: {","    print(\"PerimeterX Challenge Cancelled\")","})"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Objective-C:"}],"type":"paragraph"},{"syntax":"objectivec","type":"codeListing","code":["NSString *requestBlockedEventRegistrationId = [PerimeterX registerCallbackForRequestBlockedEventForAppId:nil callback:^{","    NSLog(@\"Request Blocked Event\");","}];","","NSString *challengeSolvedEventRegistrationId = [PerimeterX registerCallbackForChallengeSolvedEventForAppId:nil callback:^{","    NSLog(@\"Challenge Solved Event\");","}];","","NSString *challengeCancelledEventRegistrationId = [PerimeterX registerCallbackForChallengeCancelledEventForAppId:nil callback:^{","    NSLog(@\"Challenge Cancelled Event\");","}];"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForRequestBlockedEvent(forAppId:callback:)","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForChallengeSolvedEvent(forAppId:callback:)","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForChallengeCancelledEvent(forAppId:callback:)","isActive":true},{"text":" functions return a Registration ID. Use it to unregister from getting those callbacks with ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/unregisterCallbackForRequestBlockedEvent(forAppId:registrationId:)","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/unregisterCallbackForChallengeSolvedEvent(forAppId:registrationId:)","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/unregisterCallbackForChallengeCancelledEvent(forAppId:registrationId:)","isActive":true,"type":"reference"},{"type":"text","text":" functions. Here is an example:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"type":"codeListing","syntax":"swift","code":["PerimeterX.unregisterCallbackForRequestBlockedEvent(forAppId: nil, registrationId: requestBlockedEventRegistrationId)","","PerimeterX.unregisterCallbackForChallengeSolvedEvent(forAppId: nil, registrationId: challengeSolvedEventRegistrationId)","","PerimeterX.unregisterCallbackForChallengeCancelledEvent(forAppId: nil, registrationId: challengeCancelledEventRegistrationId)"]},{"type":"paragraph","inlineContent":[{"text":"Objective-C:","type":"text"}]},{"type":"codeListing","syntax":"objectivec","code":["[PerimeterX unregisterCallbackForRequestBlockedEventForAppId:nil registrationId:requestBlockedEventRegistrationId];","","[PerimeterX unregisterCallbackForChallengeSolvedEventForAppId:nil registrationId:challengeSolvedEventRegistrationId];","","[PerimeterX unregisterCallbackForChallengeCancelledEventForAppId:nil registrationId:challengeCancelledEventRegistrationId];"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another important callback is when the Perimeter SDK is ready. Calling the "},{"isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/start(appId:delegate:enableDoctorCheck:completion:)","type":"reference"},{"type":"text","text":" function will start an async operation that will start the PerimeterX SDK. This function has a completion handler, but you can register to this event from other places in your project, using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/addInitializationFinishedCallback(forAppId:callback:)"},{"text":" function. Here is an example:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["PerimeterX.addInitializationFinishedCallback(forAppId: nil) {","    print(\"PerimeterX is ready\")","}"]},{"inlineContent":[{"text":"Objective-C:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"objectivec","code":["[PerimeterX addInitializationFinishedCallbackForAppId:nil callback:^{","    NSLog(@\"PerimeterX is ready\");","}];"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call the "},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/addInitializationFinishedCallback(forAppId:callback:)","isActive":true},{"type":"text","text":" when the PerimeterX SDK is ready. In this case, the callback will be called immediately."}]},{"type":"heading","anchor":"Block-Error","text":"Block Error","level":3},{"inlineContent":[{"text":"When the ","type":"text"},{"code":"PXPolicy\/requestsInterceptedAutomaticallyEnabled","type":"codeVoice"},{"text":" is set to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":", the PerimeterX SDK will automatically block requests and present a challenge to the end user. When there is a block, the original request will fail with the following Error: domain: "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorDomain"},{"type":"text","text":", code: "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode\/requestWasBlocked","type":"reference","isActive":true},{"type":"text","text":". You can check the received error with the "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/isRequestBlockedError(error:)","type":"reference","isActive":true},{"type":"text","text":" function. Here is an example:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"syntax":"swift","type":"codeListing","code":["let isRequestBlockedError = PerimeterX.isRequestBlockedError(error: error)","if isRequestBlockedError {","    print(\"request was blocked by PX\")","}"]},{"inlineContent":[{"text":"Objective-C:","type":"text"}],"type":"paragraph"},{"code":["BOOL isRequestBlockedError = [PerimeterX isRequestBlockedErrorWithError:error];","if (isRequestBlockedError) {","    NSLog(@\"request was blocked by PX\");","}"],"syntax":"objectivec","type":"codeListing"},{"inlineContent":[{"type":"text","text":"If your are using "},{"identifier":"https:\/\/github.com\/Alamofire\/Alamofire","type":"reference","isActive":true},{"type":"text","text":", you should pass the "},{"code":"AFError.underlyingError","type":"codeVoice"},{"text":" object to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/isRequestBlockedError(error:)","isActive":true},{"text":" function. Here is an example:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let error = response.error?.underlyingError {","    let isRequestBlockedError = PerimeterX.isRequestBlockedError(error: error)","    if isRequestBlockedError {","        print(\"request was blocked by PX\")","    }","}"]},{"anchor":"Block-response-with-the-challenge-result","text":"Block response with the challenge result","type":"heading","level":3},{"inlineContent":[{"text":"The SDK automatically intercepts HTTP requests. Once a request is blocked, a “request blocked” error is returned to your handler code, while the user is solving the challenge. However, you can configure the SDK to delay the response until the user solved the challenge (or cancelled it). In this way, you can retry the original request a soon as you get the error (assuming the user solved the challenge) without waiting for this event to be occurred elsewhere in your code.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can check the error with ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/isChallengeSolvedError(error:)","isActive":true},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/isChallengeCancelledError(error:)"},{"type":"text","text":" functions:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"type":"codeListing","code":["let isChallengeSolvedError = PerimeterX.isChallengeSolvedError(error: error)","if isChallengeSolvedError {","    print(\"request was blocked by PX and user solved the challenge\")","}","","let isChallengeCancelledError = PerimeterX.isChallengeCancelledError(error: error)","if isChallengeCancelledError {","    print(\"request was blocked by PX and challenge was cancelled\")","}"],"syntax":"swift"},{"inlineContent":[{"text":"Objective-C:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["BOOL isChallengeSolvedError = [PerimeterX isChallengeSolvedError:error];","if (isChallengeSolvedError) {","    NSLog(@\"request was blocked by PX and user solved the challenge\");","}","","BOOL isChallengeCancelledError = [PerimeterX isChallengeCancelledError:error];","if (isChallengeCancelledError) {","    NSLog(@\"request was blocked by PX and challenge was cancelled\");","}"],"syntax":"objectivec"},{"inlineContent":[{"type":"text","text":"To enable this feature (disabled by default) you should configure it in the policy:"}],"type":"paragraph"},{"inlineContent":[{"text":"Swift:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let policy = PXPolicy()","policy.delayResponseUntilChallengeSolvedOrCancelled = true","PerimeterX.setPolicy(policy: policy, forAppId: nil, completion: nil)"]},{"inlineContent":[{"type":"text","text":"Objective-C:"}],"type":"paragraph"},{"type":"codeListing","code":["PXPolicy *policy = [[PXPolicy alloc] init];","policy.delayResponseUntilChallengeSolvedOrCancelled = YES;","[PerimeterX setPolicyWithPolicy:policy forAppId:nil completion:nil];"],"syntax":"objectivec"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that enabling this could mean that your request handler code will not be called at all (for example, when the user does not solve nor cancel the challenge)."}]},{"text":"Hybrid App","level":3,"anchor":"Hybrid-App","type":"heading"},{"inlineContent":[{"text":"The hybrid App uses both native URL requests and web views to communicate with the server. In the context of PerimeterX, it’s important to make sure both native requests and web views are synced together to make sure end users will get the expected behavior from your app. To help PerimeterX SDK achieve that, you should set your domain in the policy for the relevant AppID. Here is an example:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift:"}]},{"syntax":"swift","code":["let policy = PXPolicy()","policy.domains.insert(\"my-domain.com\")","PerimeterX.setPolicy(policy: policy, forAppId: nil, completion: nil)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Objective-C:"}]},{"code":["PXPolicy *policy = [[PXPolicy alloc] init];","policy.domains = [NSSet setWithObject:@\"my-domain.com\"];","[PerimeterX setPolicyWithPolicy:policy forAppId:nil completion:nil];"],"type":"codeListing","syntax":"objectivec"},{"type":"paragraph","inlineContent":[{"text":"If your app using ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/apple_pay_on_the_web","type":"reference"},{"text":" you should disable JavaScript evaluation by the SDK. In order to protect the security of Apple Pay transactions in WKWebView, Apple Pay cannot be used alongside of script injection APIs. You can do this by setting the policy. Here is an example:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let policy = PXPolicy()","policy.allowJavaScriptEvaluation = false","PerimeterX.setPolicy(policy: policy, forAppId: nil, completion: nil)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Objective-C:"}]},{"type":"codeListing","syntax":"objectivec","code":["PXPolicy *policy = [[PXPolicy alloc] init];","policy.allowJavaScriptEvaluation = NO;","[PerimeterX setPolicyWithPolicy:policy forAppId:nil completion:nil];"]},{"inlineContent":[{"text":"You can turn off the hybrid app support by setting the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PXPolicy\/requestsInterceptedAutomaticallyEnabled-swift.type.property"},{"type":"text","text":" to false. You must call set this before calling the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/start(appId:delegate:enableDoctorCheck:completion:)"},{"type":"text","text":" function."}],"type":"paragraph"},{"text":"Multiple AppIDs","anchor":"Multiple-AppIDs","type":"heading","level":3},{"inlineContent":[{"text":"You can configure multiple AppIDs for the PerimeterX SDK, by calling the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/start(appId:delegate:enableDoctorCheck:completion:)","isActive":true},{"type":"text","text":" function for each AppID you have."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When using multiple AppIDs, you should:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Specify the relevant AppID anytime you call functions in the PerimeterX SDK.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Set the domain list in the policy for each AppID. Here is an example:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let policyForAppId1 = PXPolicy()","policyForAppId1.domains.insert(\"my-domain-1.com\")","PerimeterX.setPolicy(policy: policyForAppId1, forAppId: \"<APP_ID_1>\", completion: nil)","","let policyForAppId2 = PXPolicy()","policyForAppId2.domains.insert(\"my-domain-2.com\")","PerimeterX.setPolicy(policy: policyForAppId2, forAppId: \"<APP_ID_2>\", completion: nil)"]},{"inlineContent":[{"text":"Objective-C:","type":"text"}],"type":"paragraph"},{"syntax":"objectivec","code":["PXPolicy *policyForAppId1 = [[PXPolicy alloc] init];","policyForAppId1.domains = [NSSet setWithObject:@\"my-domain-1.com\"];","[PerimeterX setPolicyWithPolicy:policyForAppId1 forAppId:@\"<APP_ID_1>\" completion:nil];","","PXPolicy *policyForAppId2 = [[PXPolicy alloc] init];","policyForAppId2.domains = [NSSet setWithObject:@\"my-domain-2.com\"];","[PerimeterX setPolicyWithPolicy:policyForAppId2 forAppId:@\"<APP_ID_2>\" completion:nil];"],"type":"codeListing"}]}]},{"anchor":"Doctor-App","type":"heading","level":3,"text":"Doctor App"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The “Doctor App” is a tool that helps verify the SDK integration in your project by simulating a typical user flow in the application. When the “Doctor app” is enabled, it will pop up as part of the app flow and will guide the developer on simulating a user flow to gather the required information for testing the integration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The “Doctor App” includes assets that are used for the UI. Those assets are required only for the “Doctor App” usage and are not needed in your app production build. In order minimize the SDK footprint, those assets are loaded dynamically in run time (from v2.1.0)."}]},{"inlineContent":[{"text":"If you run the “Doctor App” on a real device with iOS 14 or above, those assets will be loaded automatically (internet connection is required). However, if you run the “Doctor App” on a simulator or on a real device with iOS 13 or less, you will need to add the ","type":"text"},{"type":"codeVoice","code":"PerimeterX.bundle"},{"type":"text","text":" file to your project. You need to remember to remove it from your project before you build and deploy your app to production."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can get the "},{"type":"codeVoice","code":"PerimeterX.bundle"},{"type":"text","text":" file here (please refer to the relevant Mobile SDK version):"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"2.1.0 and higher - "},{"identifier":"https:\/\/perimeterx.jfrog.io\/artifactory\/files\/doctor-app-assets\/ios\/1.0\/PerimeterX.bundle.zip","isActive":true,"type":"reference"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"How to add the "},{"type":"codeVoice","code":"PerimeterX.bundle"},{"text":" file to your project?","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"Download the ","type":"text"},{"type":"codeVoice","code":"PerimeterX.bundle.zip"},{"type":"text","text":" file from the link above."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unzip it and drag the "},{"type":"codeVoice","code":"PerimeterX.bundle"},{"type":"text","text":" file to your project (make sure to link it to relevant targets)."}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"In order to enable this feature, call the ","type":"text"},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/start(appId:delegate:enableDoctorCheck:completion:)","type":"reference","isActive":true},{"text":" function with the ","type":"text"},{"code":"enableDoctorCheck","type":"codeVoice"},{"type":"text","text":" as "},{"type":"codeVoice","code":"true"},{"text":". Here is an example:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift:","type":"text"}]},{"code":["PerimeterX.start(appId: \"<APP_ID>\", delegate: self, enableDoctorCheck: true) { success, error in","    ","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Objective-C:","type":"text"}],"type":"paragraph"},{"syntax":"objectivec","code":["[PerimeterX startWithAppId:@\"<APP_ID>\" delegate:self enableDoctorCheck:YES completion:^(BOOL success, NSError * _Nullable error) {","","}];"],"type":"codeListing"},{"inlineContent":[{"text":"IMPORTANT NOTICE: this feature is for development only and should not be shipped as enabled with the application to the store.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Flow:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Welcome screen"},{"type":"text","text":" "},{"type":"text","text":"In this screen you select whether to start a new test or load the summary of a previous test, if one exists."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"doctor_app_integration_pic_1.png"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Instruction screen"},{"text":" ","type":"text"},{"type":"text","text":"In this screen you get a detailed explanation on how to start a new test, what is expected to happen and what you can do in case you are not able to generate a challenge\/captcha."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"doctor_app_integration_pic_2.png"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Test selection screen"},{"type":"text","text":" "},{"type":"text","text":"In this screen you can select between two different types of tests:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Native app framework - to test your native URL requests.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Web view framework - to test your web view URL requests.","type":"text"},{"type":"text","text":" "},{"text":"When you are done executing a test, you will return to this screen to enable you to start the other test.","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"doctor_app_integration_pic_3.png"}]}]},{"content":[{"inlineContent":[{"text":"Summary screen","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this screen you review the test results. You can go into details regarding each test and get troubleshooting tips in case a test failed, to help you analyze what is causing this issue."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"doctor_app_integration_pic_4.png","type":"image"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When you exit the “Doctor App”, your app is also terminated. Just remember to switch the ","type":"text"},{"code":"enableDoctorCheck","type":"codeVoice"},{"type":"text","text":" param to "},{"code":"false","type":"codeVoice"},{"type":"text","text":" in case you finished validating your SDK integration."}]}]}],"type":"orderedList"}]}],"hierarchy":{"paths":[["doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterXErrorCode/challengeCancelled":{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode\/challengeCancelled","title":"PerimeterXErrorCode.challengeCancelled","url":"\/documentation\/perimeterx_sdk\/perimeterxerrorcode\/challengecancelled","role":"symbol","type":"topic","abstract":[],"fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"challengeCancelled"}],"kind":"symbol"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/start(appId:delegate:enableDoctorCheck:completion:)":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"start","kind":"identifier"},{"kind":"text","text":"("},{"text":"appId","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", ","kind":"text"},{"text":"delegate","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@PerimeterX_SDK@objc(pl)PerimeterXDelegate","text":"PerimeterXDelegate"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"enableDoctorCheck"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"completion"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":"?) -> ())"}],"title":"start(appId:delegate:enableDoctorCheck:completion:)","abstract":[{"type":"text","text":"Start the PerimeterX SDK."}],"url":"\/documentation\/perimeterx_sdk\/perimeterx\/start(appid:delegate:enabledoctorcheck:completion:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/start(appId:delegate:enableDoctorCheck:completion:)","navigatorTitle":[{"kind":"identifier","text":"startWithAppId:delegate:enableDoctorCheck:completion:"}],"role":"symbol"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterXErrorDomain":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PerimeterXErrorDomain","kind":"identifier"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"PerimeterX error domain. This will be included in errors objects that generated in the SDK. List of error codes is defined in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode"},{"text":".","type":"text"}],"type":"topic","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorDomain","url":"\/documentation\/perimeterx_sdk\/perimeterxerrordomain","role":"symbol","title":"PerimeterXErrorDomain","kind":"symbol"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterXErrorCode/requestWasBlocked":{"title":"PerimeterXErrorCode.requestWasBlocked","abstract":[],"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode\/requestWasBlocked","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"requestWasBlocked"}],"url":"\/documentation\/perimeterx_sdk\/perimeterxerrorcode\/requestwasblocked","kind":"symbol","type":"topic","role":"symbol"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterXErrorCode":{"navigatorTitle":[{"kind":"identifier","text":"PerimeterXErrorCode"}],"role":"symbol","title":"PerimeterXErrorCode","url":"\/documentation\/perimeterx_sdk\/perimeterxerrorcode","abstract":[{"text":"PerimeterX error codes. This will be included in errors objects that generated in the SDK.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PerimeterXErrorCode"}]},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/unregisterCallbackForChallengeCancelledEvent(forAppId:registrationId:)":{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/unregisterCallbackForChallengeCancelledEvent(forAppId:registrationId:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unregisterCallbackForChallengeCancelledEvent"},{"kind":"text","text":"("},{"kind":"externalParam","text":"forAppId"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?, ","kind":"text"},{"text":"registrationId","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":")","kind":"text"}],"navigatorTitle":[{"kind":"identifier","text":"unregisterCallbackForChallengeCancelledEventForAppId:registrationId:"}],"abstract":[{"type":"text","text":"Unregister the callback for challenge cancelled that is associated with the given registration ID."}],"type":"topic","kind":"symbol","title":"unregisterCallbackForChallengeCancelledEvent(forAppId:registrationId:)","role":"symbol","url":"\/documentation\/perimeterx_sdk\/perimeterx\/unregistercallbackforchallengecancelledevent(forappid:registrationid:)"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/addInitializationFinishedCallback(forAppId:callback:)":{"title":"addInitializationFinishedCallback(forAppId:callback:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/addInitializationFinishedCallback(forAppId:callback:)","abstract":[{"text":"Add a callback for the start flow.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addInitializationFinishedCallback"},{"text":"(","kind":"text"},{"text":"forAppId","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"?, ","kind":"text"},{"text":"callback","kind":"externalParam"},{"text":": () -> ())","kind":"text"}],"kind":"symbol","url":"\/documentation\/perimeterx_sdk\/perimeterx\/addinitializationfinishedcallback(forappid:callback:)","navigatorTitle":[{"kind":"identifier","text":"addInitializationFinishedCallbackForAppId:callback:"}],"type":"topic","role":"symbol"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterXErrorCode/challengeSolved":{"kind":"symbol","url":"\/documentation\/perimeterx_sdk\/perimeterxerrorcode\/challengesolved","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"challengeSolved","kind":"identifier"}],"title":"PerimeterXErrorCode.challengeSolved","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode\/challengeSolved","role":"symbol","type":"topic","abstract":[]},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PXPolicy/requestsInterceptedAutomaticallyEnabled-swift.type.property":{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PXPolicy\/requestsInterceptedAutomaticallyEnabled-swift.type.property","abstract":[{"type":"text","text":"Set this to false before calling the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/start(appId:delegate:enableDoctorCheck:completion:)"},{"text":" fucntion in order to disable requests interception.","type":"text"}],"role":"symbol","title":"requestsInterceptedAutomaticallyEnabled","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestsInterceptedAutomaticallyEnabled","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"navigatorTitle":[{"text":"requestsInterceptedAutomaticallyEnabled","kind":"identifier"}],"url":"\/documentation\/perimeterx_sdk\/pxpolicy\/requestsinterceptedautomaticallyenabled-swift.type.property","type":"topic","kind":"symbol"},"doctor_app_integration_pic_3.png":{"identifier":"doctor_app_integration_pic_3.png","type":"image","alt":"Test selection screen","variants":[{"traits":["2x","light"],"url":"\/images\/doctor_app_integration_pic_3@2x.png"}]},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/unregisterCallbackForChallengeSolvedEvent(forAppId:registrationId:)":{"title":"unregisterCallbackForChallengeSolvedEvent(forAppId:registrationId:)","kind":"symbol","type":"topic","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/unregisterCallbackForChallengeSolvedEvent(forAppId:registrationId:)","abstract":[{"type":"text","text":"Unregister the callback for challenge solved that is associated with the given registration ID."}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unregisterCallbackForChallengeSolvedEvent"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"forAppId"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"registrationId"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"url":"\/documentation\/perimeterx_sdk\/perimeterx\/unregistercallbackforchallengesolvedevent(forappid:registrationid:)","role":"symbol","navigatorTitle":[{"text":"unregisterCallbackForChallengeSolvedEventForAppId:registrationId:","kind":"identifier"}]},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/registerCallbackForChallengeCancelledEvent(forAppId:callback:)":{"title":"registerCallbackForChallengeCancelledEvent(forAppId:callback:)","abstract":[{"type":"text","text":"Register a callback that will be called after the user cancelled the challenge."}],"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForChallengeCancelledEvent(forAppId:callback:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"registerCallbackForChallengeCancelledEvent"},{"text":"(","kind":"text"},{"text":"forAppId","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?, "},{"text":"callback","kind":"externalParam"},{"text":": () -> ()) -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?","kind":"text"}],"url":"\/documentation\/perimeterx_sdk\/perimeterx\/registercallbackforchallengecancelledevent(forappid:callback:)","kind":"symbol","navigatorTitle":[{"text":"registerCallbackForChallengeCancelledEventForAppId:callback:","kind":"identifier"}],"type":"topic","role":"symbol"},"doctor_app_integration_pic_1.png":{"identifier":"doctor_app_integration_pic_1.png","variants":[{"url":"\/images\/doctor_app_integration_pic_1@2x.png","traits":["2x","light"]}],"type":"image","alt":"Welcome screen"},"https://developer.apple.com/documentation/apple_pay_on_the_web":{"identifier":"https:\/\/developer.apple.com\/documentation\/apple_pay_on_the_web","type":"link","title":"Apple Pay on the Web","titleInlineContent":[{"type":"text","text":"Apple Pay on the Web"}],"url":"https:\/\/developer.apple.com\/documentation\/apple_pay_on_the_web"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK":{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK","role":"collection","kind":"symbol","url":"\/documentation\/perimeterx_sdk","title":"PerimeterX_SDK","type":"topic","abstract":[{"type":"image","identifier":"PerimeterX.png"}]},"https://github.com/Alamofire/Alamofire":{"titleInlineContent":[{"text":"Alamofire","type":"text"}],"title":"Alamofire","url":"https:\/\/github.com\/Alamofire\/Alamofire","type":"link","identifier":"https:\/\/github.com\/Alamofire\/Alamofire"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/registerCallbackForRequestBlockedEvent(forAppId:callback:)":{"navigatorTitle":[{"kind":"identifier","text":"registerCallbackForRequestBlockedEventForAppId:callback:"}],"type":"topic","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"registerCallbackForRequestBlockedEvent","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"forAppId"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?, "},{"text":"callback","kind":"externalParam"},{"kind":"text","text":": () -> ()) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"?","kind":"text"}],"kind":"symbol","abstract":[{"text":"Register a callback that will be called after a request was blocked.","type":"text"}],"url":"\/documentation\/perimeterx_sdk\/perimeterx\/registercallbackforrequestblockedevent(forappid:callback:)","title":"registerCallbackForRequestBlockedEvent(forAppId:callback:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForRequestBlockedEvent(forAppId:callback:)"},"doctor_app_integration_pic_4.png":{"identifier":"doctor_app_integration_pic_4.png","type":"image","alt":"Summary screen","variants":[{"traits":["2x","light"],"url":"\/images\/doctor_app_integration_pic_4@2x.png"}]},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/isRequestBlockedError(error:)":{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/isRequestBlockedError(error:)","role":"symbol","title":"isRequestBlockedError(error:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"isRequestBlockedError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"error","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s5ErrorP","text":"Error","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"type":"topic","abstract":[{"type":"text","text":"Returns true if the error is "},{"isActive":true,"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode\/requestWasBlocked","type":"reference"},{"type":"text","text":" error."}],"url":"\/documentation\/perimeterx_sdk\/perimeterx\/isrequestblockederror(error:)","navigatorTitle":[{"text":"isRequestBlockedErrorWithError:","kind":"identifier"}]},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/unregisterCallbackForRequestBlockedEvent(forAppId:registrationId:)":{"navigatorTitle":[{"text":"unregisterCallbackForRequestBlockedEventForAppId:registrationId:","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unregisterCallbackForRequestBlockedEvent"},{"text":"(","kind":"text"},{"text":"forAppId","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"registrationId"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"Unregister the callback for request blocked that is associated with the given registration ID."}],"url":"\/documentation\/perimeterx_sdk\/perimeterx\/unregistercallbackforrequestblockedevent(forappid:registrationid:)","title":"unregisterCallbackForRequestBlockedEvent(forAppId:registrationId:)","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/unregisterCallbackForRequestBlockedEvent(forAppId:registrationId:)"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/isChallengeSolvedError(error:)":{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/isChallengeSolvedError(error:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"isChallengeSolvedError","kind":"identifier"},{"kind":"text","text":"("},{"text":"error","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"navigatorTitle":[{"text":"isChallengeSolvedErrorWithError:","kind":"identifier"}],"role":"symbol","title":"isChallengeSolvedError(error:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Returns true if the error is "},{"type":"reference","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode\/challengeSolved","isActive":true},{"type":"text","text":" error."}],"url":"\/documentation\/perimeterx_sdk\/perimeterx\/ischallengesolvederror(error:)"},"https://perimeterx.jfrog.io/artifactory/files/doctor-app-assets/ios/1.0/PerimeterX.bundle.zip":{"titleInlineContent":[{"text":"PerimeterX.bundle","type":"text"}],"title":"PerimeterX.bundle","url":"https:\/\/perimeterx.jfrog.io\/artifactory\/files\/doctor-app-assets\/ios\/1.0\/PerimeterX.bundle.zip","type":"link","identifier":"https:\/\/perimeterx.jfrog.io\/artifactory\/files\/doctor-app-assets\/ios\/1.0\/PerimeterX.bundle.zip"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterXDelegate":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PerimeterXDelegate","kind":"identifier"}],"abstract":[{"type":"text","text":"PerimeterX protocol"}],"type":"topic","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXDelegate","navigatorTitle":[{"kind":"identifier","text":"PerimeterXDelegate"}],"url":"\/documentation\/perimeterx_sdk\/perimeterxdelegate","role":"symbol","kind":"symbol","title":"PerimeterXDelegate"},"doctor_app_integration_pic_2.png":{"variants":[{"traits":["2x","light"],"url":"\/images\/doctor_app_integration_pic_2@2x.png"}],"type":"image","identifier":"doctor_app_integration_pic_2.png","alt":"Instruction screen"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/isChallengeCancelledError(error:)":{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/isChallengeCancelledError(error:)","title":"isChallengeCancelledError(error:)","url":"\/documentation\/perimeterx_sdk\/perimeterx\/ischallengecancellederror(error:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns true if the error is "},{"identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterXErrorCode\/challengeCancelled","type":"reference","isActive":true},{"type":"text","text":" error."}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isChallengeCancelledError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"error","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"navigatorTitle":[{"text":"isChallengeCancelledErrorWithError:","kind":"identifier"}],"kind":"symbol"},"doc://com.perimeterx.mobile-sdk/documentation/PerimeterX_SDK/PerimeterX/registerCallbackForChallengeSolvedEvent(forAppId:callback:)":{"title":"registerCallbackForChallengeSolvedEvent(forAppId:callback:)","kind":"symbol","type":"topic","identifier":"doc:\/\/com.perimeterx.mobile-sdk\/documentation\/PerimeterX_SDK\/PerimeterX\/registerCallbackForChallengeSolvedEvent(forAppId:callback:)","abstract":[{"text":"Register a callback that will be called after the user solved the challenge.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"registerCallbackForChallengeSolvedEvent","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"forAppId"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"callback","kind":"externalParam"},{"text":": () -> ()) -> ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?"}],"url":"\/documentation\/perimeterx_sdk\/perimeterx\/registercallbackforchallengesolvedevent(forappid:callback:)","role":"symbol","navigatorTitle":[{"text":"registerCallbackForChallengeSolvedEventForAppId:callback:","kind":"identifier"}]}},"variantOverrides":[{"patch":[{"path":"\/identifier\/interfaceLanguage","value":"occ","op":"replace"},{"op":"add","path":"\/topicSections","value":null},{"value":null,"op":"add","path":"\/seeAlsoSections"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1start(appId:delegate:enableDoctorCheck:completion:)\/title","value":"startWithAppId:delegate:enableDoctorCheck:completion:"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1start(appId:delegate:enableDoctorCheck:completion:)\/fragments","value":[{"kind":"text","text":"+ "},{"text":"startWithAppId:delegate:enableDoctorCheck:completion:","kind":"identifier"}]},{"value":"unregisterCallbackForChallengeCancelledEventForAppId:registrationId:","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1unregisterCallbackForChallengeCancelledEvent(forAppId:registrationId:)\/title"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1unregisterCallbackForChallengeCancelledEvent(forAppId:registrationId:)\/fragments","value":[{"kind":"text","text":"+ "},{"text":"unregisterCallbackForChallengeCancelledEventForAppId:registrationId:","kind":"identifier"}]},{"op":"replace","value":"addInitializationFinishedCallbackForAppId:callback:","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1addInitializationFinishedCallback(forAppId:callback:)\/title"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1addInitializationFinishedCallback(forAppId:callback:)\/fragments","value":[{"kind":"text","text":"+ "},{"kind":"identifier","text":"addInitializationFinishedCallbackForAppId:callback:"}],"op":"replace"},{"value":"requestsInterceptedAutomaticallyEnabled","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PXPolicy~1requestsInterceptedAutomaticallyEnabled-swift.type.property\/title"},{"op":"replace","value":[{"kind":"identifier","text":"requestsInterceptedAutomaticallyEnabled"}],"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PXPolicy~1requestsInterceptedAutomaticallyEnabled-swift.type.property\/fragments"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1unregisterCallbackForChallengeSolvedEvent(forAppId:registrationId:)\/title","op":"replace","value":"unregisterCallbackForChallengeSolvedEventForAppId:registrationId:"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1unregisterCallbackForChallengeSolvedEvent(forAppId:registrationId:)\/fragments","op":"replace","value":[{"text":"+ ","kind":"text"},{"kind":"identifier","text":"unregisterCallbackForChallengeSolvedEventForAppId:registrationId:"}]},{"value":"registerCallbackForChallengeCancelledEventForAppId:callback:","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1registerCallbackForChallengeCancelledEvent(forAppId:callback:)\/title"},{"value":[{"text":"+ ","kind":"text"},{"text":"registerCallbackForChallengeCancelledEventForAppId:callback:","kind":"identifier"}],"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1registerCallbackForChallengeCancelledEvent(forAppId:callback:)\/fragments","op":"replace"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1registerCallbackForRequestBlockedEvent(forAppId:callback:)\/title","op":"replace","value":"registerCallbackForRequestBlockedEventForAppId:callback:"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1registerCallbackForRequestBlockedEvent(forAppId:callback:)\/fragments","value":[{"text":"+ ","kind":"text"},{"text":"registerCallbackForRequestBlockedEventForAppId:callback:","kind":"identifier"}]},{"value":"isRequestBlockedErrorWithError:","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1isRequestBlockedError(error:)\/title"},{"value":[{"text":"+ ","kind":"text"},{"text":"isRequestBlockedErrorWithError:","kind":"identifier"}],"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1isRequestBlockedError(error:)\/fragments"},{"value":"unregisterCallbackForRequestBlockedEventForAppId:registrationId:","op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1unregisterCallbackForRequestBlockedEvent(forAppId:registrationId:)\/title"},{"op":"replace","value":[{"kind":"text","text":"+ "},{"text":"unregisterCallbackForRequestBlockedEventForAppId:registrationId:","kind":"identifier"}],"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1unregisterCallbackForRequestBlockedEvent(forAppId:registrationId:)\/fragments"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1isChallengeSolvedError(error:)\/title","value":"isChallengeSolvedErrorWithError:"},{"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1isChallengeSolvedError(error:)\/fragments","op":"replace","value":[{"text":"+ ","kind":"text"},{"text":"isChallengeSolvedErrorWithError:","kind":"identifier"}]},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterXDelegate\/title","value":"PerimeterXDelegate"},{"value":[{"kind":"identifier","text":"PerimeterXDelegate"}],"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterXDelegate\/fragments"},{"value":"isChallengeCancelledErrorWithError:","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1isChallengeCancelledError(error:)\/title","op":"replace"},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1isChallengeCancelledError(error:)\/fragments","value":[{"text":"+ ","kind":"text"},{"text":"isChallengeCancelledErrorWithError:","kind":"identifier"}]},{"op":"replace","path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1registerCallbackForChallengeSolvedEvent(forAppId:callback:)\/title","value":"registerCallbackForChallengeSolvedEventForAppId:callback:"},{"value":[{"text":"+ ","kind":"text"},{"text":"registerCallbackForChallengeSolvedEventForAppId:callback:","kind":"identifier"}],"path":"\/references\/doc:~1~1com.perimeterx.mobile-sdk~1documentation~1PerimeterX_SDK~1PerimeterX~1registerCallbackForChallengeSolvedEvent(forAppId:callback:)\/fragments","op":"replace"}],"traits":[{"interfaceLanguage":"occ"}]}]}